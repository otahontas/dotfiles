# Create folder and cd to it
function mcd() {
    mkdir $1 && cd $1
}

# Cd to folder and list content
function cl() {
    cd $1 && ls .
}

# Cleanup cache
function cache_cleanup() {
    read \?"This will cleanup cache older than 6 months. Are you sure (y/n)? "
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        find ~/.cache/ -depth -type f -atime +182 -delete
    fi
}

# Print terminal color palette
palette() {
    local -a colors
    for i in {000..255}; do
        colors+=("%F{$i}$i%f")
    done
    print -cP $colors
}

# Print terminal color code formatted
# Usage: printcolor COLOR_CODE
printcolor() {
    local color="%F{$1}"
    echo -E ${(qqqq)${(%)color}}
}

# Update zsh plugins
function update_zsh_plugins() {
    antibody bundle < $ZDOTDIR/.zsh_plugins.txt > $ZDOTDIR/.zsh_plugins.sh && \
    antibody update
}

# Function to write daily diary.
function diary() {
    if [[ ! -d $DIARYDIR/$(date +"%Y/%m") ]]; then
        mkdir -p $DIARYDIR/$(date +"%Y/%m")
    fi

    $EDITOR $DIARYDIR/$(date +"%Y/%m/%d").txt
}

function listening() {
    if [ $# -eq 0 ]; then
        sudo lsof -iTCP -sTCP:LISTEN -n -P
    elif [ $# -eq 1 ]; then
        sudo lsof -iTCP -sTCP:LISTEN -n -P | grep -i --color $1
    else
        echo "Usage: listening [pattern]"
    fi
}

function myip() {
    ifconfig | grep "inet " | grep -Fv 127.0.0.1 | awk '{print $2}'
}

function yarns() {
  if [ ! -f package.json ]; then
    echo "package.json not found" >&2
  else
    local command=$(jq '.scripts | keys[]' package.json -r | tr -d '"' |
    fzf --reverse \
      --preview-window=:wrap \
      --preview "jq '.scripts.\"{}\"' package.json -r | tr -d '\"' | sed 's/^[[:blank:]]*//'")

    if [ -n "$command" ]; then
      eval "yarn $command"
    fi
  fi
}

function npms() {
  if [ ! -f package.json ]; then
    echo "package.json not found" >&2
  else
    local command=$(jq '.scripts | keys[]' package.json -r | tr -d '"' |
    fzf --reverse \
      --preview-window=:wrap \
      --preview "jq '.scripts.\"{}\"' package.json -r | tr -d '\"' | sed 's/^[[:blank:]]*//'")

    if [ -n "$command" ]; then
      eval "npm run $command"
    fi
  fi
}

# short project setup for node projects
function pnpm-node-init() {
    pnpm init && \
    pnpm add --save-dev typescript ts-node @tsconfig/node18-strictest @types/node rome && \
    echo '{"extends": "@tsconfig/node18-strictest/tsconfig.json"}' | jq > tsconfig.json && \
    pnpm rome init && \
    echo "$(cat package.json | jq 'del(.main, .scripts.test)' | jq '.scripts.start="ts-node index.ts"')" > package.json && \
    touch index.ts
}

function load_volta() {
    export VOLTA_HOME="$HOME/.volta"
    export PATH="$VOLTA_HOME/bin:$PATH"
}
